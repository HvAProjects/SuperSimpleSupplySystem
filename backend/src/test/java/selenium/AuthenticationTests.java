package selenium;// Generated by Selenium IDE
import nl.jed.supersimplesupplysystem.SupersimplesupplysystemApplication;
import nl.jed.supersimplesupplysystem.configuration.*;
import nl.jed.supersimplesupplysystem.dto.SocialProvider;
import nl.jed.supersimplesupplysystem.models.Role;
import nl.jed.supersimplesupplysystem.models.User;
import nl.jed.supersimplesupplysystem.repository.RoleRepository;
import nl.jed.supersimplesupplysystem.repository.UserRepository;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.env.Environment;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.support.AnnotationConfigContextLoader;

import javax.mail.internet.MimeMessage;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class AuthenticationTests extends BaseSeleniumTests {

    @Autowired
    private Environment env;

    @Test
    public void registerNewUser() throws Exception {
        String url = getBaseUrl();
        driver.get(url);
        driver.findElement(By.cssSelector("html")).click();
        driver.findElement(By.linkText("Register")).click();
        driver.findElement(By.id("mat-input-2")).click();
        driver.findElement(By.id("mat-input-2")).sendKeys("User");
        driver.findElement(By.id("mat-input-3")).click();
        driver.findElement(By.id("mat-input-3")).sendKeys("test@gmail.com");
        driver.findElement(By.cssSelector(".ng-tns-c65-6 > .mat-form-field-infix")).click();
        driver.findElement(By.id("mat-input-4")).sendKeys("asdfasdf");
        driver.findElement(By.id("mat-input-5")).sendKeys("asdfasdf");
        driver.findElement(By.cssSelector(".ss-btn-blue > .mat-button-wrapper")).click();
        Thread.sleep(5000);
        assertEquals(driver.findElement(By.cssSelector(".alert")).getText(), "Your registration is successful!");
    }

    @Test
    @Order(2)
    public void loginUserSuccess() throws InterruptedException {
        User user = loginUser();
        Thread.sleep(2000);
        String welcomeText = driver.findElement(By.cssSelector(".alert")).getText();
        assertTrue(welcomeText.contains("Welcome " + user.getDisplayName()));
    }

    @Test
    @Order(3)
    public void logoutUser() throws InterruptedException {
        User user = loginUser();
        Thread.sleep(2000);
        driver.findElement(By.cssSelector(".avatar-header-container > button")).click();
        Thread.sleep(100);
        driver.findElement(By.cssSelector(".mat-menu-item")).click();
        Thread.sleep(2000);
        String text = driver.findElement(By.cssSelector(".mat-menu-trigger")).getText();
        assertEquals("Login / Register", text);
    }

    @Test
    @Order(4)
    public void loginUserTooFewCharacters() {
        String email = "testuser@gmail.com";
        String password = "123";
        String userName = "TestUser";
        driver.get(getBaseUrl());
        driver.manage().window().setSize(new Dimension(1223, 824));
        {
            WebElement element = driver.findElement(By.cssSelector(".mat-menu-trigger"));
            Actions builder = new Actions(driver);
            builder.moveToElement(element).perform();
        }
        driver.findElement(By.cssSelector(".mat-menu-trigger")).click();
        {
            WebElement element = driver.findElement(By.tagName("body"));
            Actions builder = new Actions(driver);
            builder.moveToElement(element, 0, 0).perform();
        }
        driver.findElement(By.cssSelector(".cdk-focused")).click();
        driver.findElement(By.id("email")).click();
        driver.findElement(By.id("email")).sendKeys(email);
        driver.findElement(By.id("password")).sendKeys(password);
        driver.findElement(By.id("password")).sendKeys(Keys.ENTER);
        driver.findElement(By.cssSelector(".content > .ng-star-inserted")).click();
        String text = driver.findElement(By.cssSelector(".alert")).getText();
        assertEquals("Password must be at least 6 characters", text);
    }
}
